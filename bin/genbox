#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);
use Unicode::UCD qw(charinfo charblock);
use Data::Dumper qw(Dumper);
our $width = shift(@ARGV);
our $height = shift(@ARGV);
our $baseline = shift(@ARGV);
our $thin = shift(@ARGV);
our $thick = shift(@ARGV);
our $x_center = shift(@ARGV);           # from left
our $y_center = shift(@ARGV);           # from bottom
our $range = charblock('Box Drawing');
our $low = $range->[0]->[0];
our $high = $range->[0]->[1];
foreach my $codepoint ($low .. $high) {
    my $charinfo = charinfo($codepoint);
    my $hex = sprintf("U+%04X", $codepoint);
    my $name = $charinfo->{name};
    local $_ = $name;
    if (!s{^BOX DRAWINGS }{}) {
        warn("$hex $name does not match [1]\n");
        next;
    }
    printf("%-7s %s\n", $hex, $name);
    my @result = parse($name);
    my @thickness = ((0) x 4);
    foreach my $result (@result) {
        my ($thicks, $directions) = @$result;
        my @thicks = @$thicks;
        my @directions = @$directions;
        foreach my $thick (@thicks) {
            foreach my $direction (@directions) {
                $thickness[$direction] = $thick;
            }
        }
    }
    draw(@thickness);
}
sub draw {
    # 1 = thin
    # 2 = double
    # 3 = thick
    my ($up, $right, $down, $left) = @_;
    my $one_line = ' ' x $width;
    my @lines = ($one_line) x $height;
    if ($up) {
        foreach my $y ($y_center .. ($height - 1)) {
            my @x = ($up == 1) ? ($x_center) : (($x_center - 1) .. ($x_center + 1));
            foreach my $x (@x) {
                substr($lines[$y], $x, 1) = '#';
            }
        }
    }
    if ($right) {
        foreach my $x ($x_center .. ($width - 1)) {
            my @y = ($right == 1) ? ($y_center) : (($y_center - 1) .. ($y_center + 1));
            foreach my $y (@y) {
                substr($lines[$y], $x, 1) = '#';
            }
        }
    }
    if ($down) {
        foreach my $y (0 .. $y_center) {
            my @x = ($down == 1) ? ($x_center) : (($x_center - 1) .. ($x_center + 1));
            foreach my $x (@x) {
                substr($lines[$y], $x, 1) = '#';
            }
        }
    }
    if ($left) {
        foreach my $x (0 .. $x_center) {
            my @y = ($left == 1) ? ($y_center) : (($y_center - 1) .. ($y_center + 1));
            foreach my $y (@y) {
                substr($lines[$y], $x, 1) = '#';
            }
        }
    }
    if ($up == 2) {
        foreach my $y ($y_center + 1 .. ($height - 1)) {
            substr($lines[$y], $x_center, 1) = ' ';
        }
    }
    if ($right == 2) {
        foreach my $x ($x_center + 1 .. ($width - 1)) {
            substr($lines[$y_center], $x, 1) = ' ';
        }
    }
    if ($down == 2) {
        foreach my $y (0 .. $y_center - 1) {
            substr($lines[$y], $x_center, 1) = ' ';
        }
    }
    if ($left == 2) {
        foreach my $x (0 .. $x_center - 1) {
            substr($lines[$y_center], $x, 1) = ' ';
        }
    }
    if (($up == 2 || $down == 2) && ($right == 2 || $left == 2)) {
        substr($lines[$y_center], $x_center, 1) = ' ';
    }
    if (($up == 2 && $down == 2) || ($right == 2 && $left == 2)) {
        substr($lines[$y_center], $x_center, 1) = ' ';
    }
    if ($up >= 2 && $right >= 2) {
        substr($lines[$y_center - 1],
               $x_center - 1,
               1) = '#';
    }
    if ($up >= 2 && $left >= 2) {
        substr($lines[$y_center - 1],
               $x_center + 1,
               1) = '#';
    }
    if ($down >= 2 && $right >= 2) {
        substr($lines[$y_center + 1],
               $x_center - 1,
               1) = '#';
    }
    if ($down >= 2 && $left >= 2) {
        substr($lines[$y_center + 1],
               $x_center + 1,
               1) = '#';
    }

    for (my $i = 12; $i >= 0; $i -= 1) {
        my $line = $lines[$i];
        print($i == $baseline ? '+' : '|');
        print($line);
        print('|');
        print("\n");
    }
}
our $RX_DIR;
our $RX_THICK;
our %DIR;
our %THICK;
BEGIN {
    %DIR = (
        UP => [0],
        RIGHT => [1],
        DOWN => [2],
        LEFT => [3],
        VERTICAL => [0, 2],
        HORIZONTAL => [1, 3],
    );
    %THICK = (
        SINGLE => 1,
        LIGHT => 1,
        DOUBLE => 2,
        HEAVY => 3,
    );
}
BEGIN {
    $RX_DIR = qr{(?:HORIZONTAL|VERTICAL|UP|DOWN|LEFT|RIGHT)};
    $RX_THICK = qr{(?:SINGLE|LIGHT|HEAVY|DOUBLE)};
}
sub parse {
    my ($name) = @_;
    return wantarray ? () : [] if $name =~ /\bDASH\b/;
    my $parsed = $name;
    $parsed =~ s{(\b${RX_DIR}\b)\s+(?:AND\s+)?(\b${RX_DIR}\b)}
                {'[' . join(',',@{$DIR{$1}}) . ',' . join(',',@{$DIR{$2}}) . ']'}gexi;
    $parsed =~ s{\b${RX_DIR}\b}{'[' . join(',',@{$DIR{$&}}) . ']'}gexi;
    $parsed =~ s{\b${RX_THICK}\b}{'<' . $THICK{$&} . '>'}gexi;
    $parsed =~ s{(\[.*?\])
                 (\s+)
                 (<.*?>)}
                {$3$2$1}gxi;
    $parsed =~ s{^BOX DRAWINGS }{};
    $parsed =~ s{> \[}{>[}g;
    my @parsed = split(/\s+and\s+/i, $parsed);
    my @result;
    foreach my $parsed (@parsed) {
        my @thick;
        my @dir;
        while ($parsed =~ /<(.*?)>/g) {
            push(@thick, split(/,/, $1));
        }
        while ($parsed =~ /\[(.*?)\]/g) {
            push(@dir, split(/,/, $1));
        }
        push(@result, [[@thick], [@dir]]);
    }
    local $Data::Dumper::Indent = 0;
    return @result if wantarray;
    return \@result;
}
